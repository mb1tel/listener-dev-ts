name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]
    paths:
      - 'socketio/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REPOSITORY: mb1tel/listener-dev-ts
  REPO_NAME: listener-dev-ts
  DOCKER_CONTEXT: ./socketio
  K8S_NAMESPACE: production
  NODE_VERSION: '16'

jobs:
  buildImage:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd ${{ env.DOCKER_CONTEXT }}
        npm install

    - name: Build Docker image
      run: |
        IMAGE_TAG=$(git rev-parse --short HEAD)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG ${{ env.DOCKER_CONTEXT }}

    - name: Set IMAGE_TAG Output  # ✅ Thêm id để đặt output IMAGE_TAG
      id: set_image_tag
      run: echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Log in to Docker registry
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG
        docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:latest
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:latest

  deploy:
    needs: buildImage
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.buildImage.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - uses: Azure/k8s-set-context@v4
      with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Create Kubernetes Secret General
      run: |
        echo "${{ secrets.ENV_CONFIG }}" > .env
        kubectl delete secret ${{ env.REPO_NAME }} -n ${{ env.K8S_NAMESPACE }} --ignore-not-found
        kubectl create secret generic ${{ env.REPO_NAME }} \
          --from-env-file=.env \
          -n ${{ env.K8S_NAMESPACE }}

    - name: Restore K8s Files
      run: |
        mkdir -p k8s
        echo "${{ secrets.K8S_TAR_BASE64 }}" | base64 -d | tar -xzf - -C k8s

    # - name: Debug K8s Extract
    #   run: ls -lah

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/

    - name: Ensure IMAGE_TAG is set
      run: |
        if [ -z "${{ env.IMAGE_TAG }}" ]; then
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        fi

    - name: Debug IMAGE_TAG
      run: echo "IMAGE_TAG is ${{ env.IMAGE_TAG }}"

    - name: Update Kubernetes Deployment
      run: |
        DEPLOYMENT_NAME=${{ env.REPO_NAME }}
        CONTAINER_NAME=${{ env.REPO_NAME }}
        kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }} -n ${{ env.K8S_NAMESPACE }}

    - name: Wait for Deployment rollout
      run: |
        kubectl rollout status deployment/${{ env.REPO_NAME }} -n ${{ env.K8S_NAMESPACE }}
